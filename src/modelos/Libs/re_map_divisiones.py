import pandas as pd





def reemplazar_valores(df, columna ,avisar_faltantes=True ):
    """
    Reemplaza los valores de una columna de un DataFrame según un diccionario dado.

    Parámetros:
        df (pd.DataFrame): El DataFrame original.
        columna (str): El nombre de la columna en la que se hará el reemplazo.
        diccionario_reemplazo (dict): Diccionario con los valores a reemplazar (clave = original, valor = nuevo).

    Retorna:
        pd.DataFrame: El DataFrame con los valores reemplazados en la columna especificada.
    """
    
    dict_map_divisiones = {    
       '1':'1º',
'2':'2º',
'3':'3º',
'4':'4º',
'5':'5º',
'6':'6º',
'7':'7º',
'10':'10º',
'11':'11º',
'01º':'1º',
'02°':'2º',
'03º':'3º',
'04º':'4º',
'05º':'5º',
'06º':'6º',
'07º':'7º',
'08º':'8º',
'09º':'9º',
'1°':'1º',
'1°Mañana':'1º',
'1°Programación':'1º',
'1°Secundaria':'1º',
'1°única':'1º',
'10º':'10º',
'1a':'1º',
'1ª':'1º',
'1ªCB':'1º',
'1ªProg':'1º',
'1ªsecundaria':'1º',
'1DIV.1':'1º',
'1ERA':'1º',
'1º':'1º',
'1ºDivisión':'1º',
'1PRIMERA':'1º',
'1ra':'1º',
'1ra.':'1º',
'2°':'2º',
'2°Energía':'2º',
'2°Mañana':'2º',
'2°Secundaria':'2º',
'2ª':'2º',
'2ª(AulaProtegida)':'2º',
'2ªCB':'2º',
'2ªProg':'2º',
'2ªSecundario':'2º',
'2da':'2º',
'2da.':'2º',
'2DIV2':'2º',
'2º':'2º',
'2ºDivisión':'2º',
'2SEGUNDA':'2º',
'3°':'3º',
'3°DFA':'3º',
'3°Mañana':'3º',
'3°Secundario':'3º',
'3ª':'3º',
'3ªCB':'3º',
'3ªCerámica':'3º',
'3ªProg':'3º',
'3ªsecundaria':'3º',
'3º':'3º',
'3ºDivisión':'3º',
'3ra':'3º',
'3TERCERA':'3º',
'4°':'4º',
'4°Mañana':'4º',
'4°Secundario':'4º',
'4ª':'4º',
'4ªSecundario':'4º',
'4CUARTA':'4º',
'4º':'4º',
'4ºCB':'4º',
'4ºProgamación':'4º',
'4TA':'4º',
'4to':'4º',
'5°':'5º',
'5°Secundario':'5º',
'5ª':'5º',
'5ªSecundaria':'5º',
'5º':'5º',
'5ta':'5º',
'6°':'6º',
'6°Secundario':'6º',
'6ª':'6º',
'6º':'6º',
'6º':'6º',
'6ta':'6º',
'7°':'7º',
'7ª':'7º',
'7ma':'7º',
'7º':'7º',
'8°':'8º',
'8ª':'8º',
'8º':'8º',
'8va':'8º',
'9°':'9º',
'9ª':'9º',
'9º':'9º',
'A':'A',
'ASecundario':'A',
'B':'B',
'BSecundario':'B',
'C':'C',
'CICLOBÁSICOA':'A',
'CICLOBÁSICOB':'B',
'CSecundario':'C',
'Cuarta':'4º',
'D':'D',
'E':'E',
'Octava':'8º',
'primera':'1º',
'PrimerAño':'1º',
'Primero':'1º',
'Quinta':'5º',
'SECUNDARIOA':'A',
'SECUNDARIOB':'B',
'SECUNDARIOC':'C',
'Segunda':'2º',
'SEPTIMA':'7º',
'Sexta':'6º',
'T':'T',
'TERCERA':'3º',
'U':'1º',
'UNICA':'1º',
'ÚNICA':'1º',
'UNICO':'1º',
'único':'1º',
'B Secundario':'B',
'1° Secundaria':'1º',
'1 °':'1º',
'4º CB':'4º',
'1ª secundaria':'1º',
'2 DIV 2':'2º',
'Primera':'1º',
'1° única':'1º',
'6 º':'6º',
'1 PRIMERA':'1º',
'11':'11º',
'1ª Prog':'1º',
'3º División':'3º',
'Unica':'1º',
'CICLO BÁSICO A':'A',
'2':'2º',
'1RA':'1º',
'4ª':'4º',
'2° Mañana':'2º',
'6TA':'6º',
'5ª Secundaria':'5º',
'6° Secundario':'6º',
'4° Secundario':'4º',
'4ta':'4º',
'1° Mañana':'1º',
'SECUNDARIO B':'B',
'3RA':'3º',
'3° DFA':'3º',
'3 TERCERA':'3º',
'3ª':'3º',
'SECUNDARIO A':'A',
'2ª CB':'2º',
'SECUNDARIO C':'C',
'5ta':'5º',
'2ª Prog':'2º',
'Única':'1º',
'segunda':'2º',
'cuarta':'4º',
'Septima':'7º',
'1º División':'1º',
'3°':'3º',
'PRIMERA':'1º',
'1° Programación':'1º',
'4 CUARTA':'4º',
'4°':'4º',
'1°':'1º',
'2ª Secundario':'2º',
'1 DIV. 1':'1º',
'4ta':'4º',
'2°':'2º',
'b':'B',
'2DA.':'2º',
'7 °':'7º',
'1ª':'1º',
'3ª CB':'3º',
'QUINTA':'5º',
'Tercera':'3º',
'SEGUNDA':'2º',
'CUARTA':'4º',
'A Secundario':'A',
'3ª secundaria':'3º',
'1era':'1º',
'1º':'1º',
'6ta':'6º',
'2° Secundaria':'2º',
'4º Progamación':'4º',
'4° Mañana':'4º',
'SEXTA':'6º',
'2DA':'2º',
'3° Secundario':'3º',
'u':'1º',
'2ª':'2º',
'4º':'4º',
'2º División':'2º',
'4ª Secundario':'4º',
'CICLO BÁSICO B':'B',
'2º':'2º',
'1ra':'1º',
'Primer Año':'1º',
'3° Mañana':'3º',
'unica':'1º',
'2 SEGUNDA':'2º',
'3ª Cerámica':'3º',
'única':'1º',
'4 º':'4º',
'5º':'5º',
' C Secundario':'C',
'5TA':'5º',
'5° Secundario':'5º',
'2° Energía':'2º',
'7 º':'7º',
'3ª Prog':'3º',
'1ª CB':'1º',
'1':'1º',
'2ª (Aula Protegida)':'2º',
'6 º':'6º',
'1°':'1º',
'1ra':'1º',
'4ª':'4º',
'SECUNDARIO C ':'C',
'SECUNDARIO A ':'A',
'1ª':'1º',
'5ta':'5º',
'2°':'2º',
'4ta':'4º',
'3°':'3º',
'5º':'5º',
'4º':'4º',
'4°':'4º',
'1':'1º',
'11':'11º',
'3ª':'3º',
'2º':'2º',
'2':'2º',
'2ª':'2º',
'4 º':'4º',
'1º':'1º',
'6ta':'6º',
'4 º ':'4º',
'5ta':'5º',
'2ª':'2º',
'1º':'1º',
'4ta':'4º',
'3°':'3º',
'4º':'4º',
'5º':'5º',
'11':'11º',
'3ª':'3º',
'6 º':'6º',
'1':'1º',
'4ª':'4º',
'1ra':'1º',
'2º':'2º',
'1°':'1º',
'6ta':'6º',
'4°':'4º',
'1ª':'1º',
'2':'2º',
'2°':'2º',
'3° ':'3º',
'1ª':'1º',
'3ª':'3º',
'11':'11º',
'4°':'4º',
'1º':'1º',
'1ra':'1º',
'2°':'2º',
'6 º':'6º',
'5º':'5º',
'1':'1º',
'2ª':'2º',
'5ta':'5º',
'6ta':'6º',
'2º':'2º',
'4ta':'4º',
'4º':'4º',
'1°':'1º',
'4ª':'4º',
'2':'2º',
'4º  ':'4º',
'5º  ':'5º',
'2ª  ':'2º',
'2º  ':'2º',
'4°  ':'4º',
'11':'11º',
'2°  ':'2º',
'6 º ':'6º',
'5ta ':'5º',
'4ta ':'4º',
'1':'1º',
'1ra':'1º',
'1°':'1º',
'6ta':'6º',
'2':'2º',
'1ª':'1º',
'4ª':'4º',
'3ª':'3º',
'1º':'1º',
'4° ':'4º',
'5º':'5º',
'2º':'2º',
'1°':'1º',
'6ta':'6º',
'1ª':'1º',
'4ª':'4º',
'1':'1º',
'3ª':'3º',
'2':'2º',
'2°':'2º',
'4º':'4º',
'2ª':'2º',
'1ra':'1º',
'11':'11º',
'1º':'1º',
'1ra ':'1º',
'2º':'2º',
'4ª':'4º',
'1°':'1º',
'1':'1º',
'1ª':'1º',
'2ª':'2º',
'6ta':'6º',
'3ª':'3º',
'11':'11º',
'4º':'4º',
'1º':'1º',
'2':'2º',
'2°':'2º',
'5º':'5º',
'3º':'3º',
'1º':'1º',
'5º':'5º',
'2º':'2º',
'4º':'4º',
'A':'A',
'6º':'6º',
'B':'B',
'9º':'9º',
'8º':'8º',
'7º':'7º',
'3ª ':'3º',
'2':'2º',
'2° ':'2º',
'T':'T',
'2º ':'2º',
'2ª ':'2º',
'6ta ':'6º',
'1° ':'1º',
'1ª ':'1º',
'D':'D',
'10º':'10º',
'C':'C',
'4ª ':'4º',
'4º ':'4º',
'1':'1º',
'11':'11º',
'2':'2º',
'1º':'1º',
'1ª ':'1º',
'1º ':'1º',
'11':'11º',
'E':'E',
'11':'11º',
'5º':'5º',
'2':'2º',
'1':'1º',
'11':'11º',
'5º':'5º',
'2':'2º',
'1':'1º',
'11':'11º',
'2':'2º',
'1':'1º',
'11':'11º',
'5º':'5º',
11:'11º',
2:'2º',
1:'1º',


    }
    
    df = df.copy()
    if avisar_faltantes:
        valores_unicos = set(df[columna].dropna().unique())
        claves_diccionario = set(dict_map_divisiones.keys())
        faltantes = valores_unicos - claves_diccionario

        if faltantes:
            print(f"Aviso: Los siguientes valores no están en el diccionario de reemplazo: {faltantes}")
            for valor in faltantes:
                print(valor)
            #exit()

    df[columna] = df[columna].replace(dict_map_divisiones)
    return df

def listar_valores_unicos(df, columna, ordenar=True, dropna=True):
    """
    Devuelve los valores únicos de una columna de un DataFrame.

    Parámetros:
        df (pd.DataFrame): El DataFrame de entrada.
        columna (str): El nombre de la columna a analizar.
        ordenar (bool): Si es True, devuelve los valores ordenados.
        dropna (bool): Si es True, excluye los valores NaN.

    Retorna:
        list: Lista de valores únicos en la columna.
    """
    valores = df[columna].dropna().unique() if dropna else df[columna].unique()
    return sorted(valores) if ordenar else list(valores)
